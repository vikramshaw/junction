** jdbc/with-db-transaction

The library ~clojure.java.jdbc~ is a low level clojure wrapper for JDBC-based access to
databases. We use ~with-db-transaction~ macro providing the db connection to a variable in the form
of binding for subsequent evaluation.

There are several functions that we have used for queries from the database.

#+BEGIN_SRC clojure
jdbc/insert!

Usage: (insert! db table row)
       (insert! db table cols-or-row values-or-opts)
       (insert! db table cols values opts)
#+END_SRC

Given a database connection, a table name and either a map representing rows, or a list of column
names followed by a list of column values also representing a single row is added by performing an
insert.
When inserting a row as a map, the result is the database-specific form of the generated keys, if
available (note: PostgreSQL returns the whole row).
When inserting a row as a list of column values, the result is the count of rows affected (1), if
available (from getUpdateCount after executeBatch).
The row map or column value vector may be followed by a map of options:
The ~:transaction?~ option specifies whether to run in a transaction or not.
The default is true (use a transaction). The ~:entities~ option specifies how to convert the table
name and column names to SQL entities.

** jdbc/query

#+BEGIN_SRC clojure
Usage: (query db sql-params)
       (query db sql-params opts)
#+END_SRC

Given a database connection and a vector containing SQL and optional parameters, perform a simple
database query. The options specify how to construct the result set (and are also passed to
prepare-statement as needed):
 + ~:as-arrays?~ - return the results as a set of arrays, default false.
 + ~:identifiers~ - applied to each column name in the result set, default lower-case
 + ~:keywordize?~ - defaults to true, can be false to opt-out of converting identifiers to keywords
 + ~:qualifier~ - optionally provides the namespace qualifier for identifiers
 + ~:result-set-fn~ - applied to the entire result set, default doall / vec
    -  if ~:as-arrays?~ true, :result-set-fn will default to vec
    -  if ~:as-arrays?~ false, :result-set-fn will default to doall
 + ~:row-fn~ - applied to each row as the result set is constructed, default identity

*** find-user-by-username
This function is called within ~sign-up~ from ~service.clj~ and takes in the datasource and
~:username~ parameter of the user. It queries out the first result of the username provided, from
the database. It then adds a ~:user-roles~ attribute to the result using the ~find-user-roles~
function using the ~:id~ attribute of the user

#+begin_src clojure
(defn find-user-by-username [conn username]
  (when-let [user
             (first
              (jdbc/query conn ["select * from user where username = ?" username]))]
    (assoc user :user-roles (find-user-roles conn (:id user)))))
#+end_src

*** find-user-roles
This function uses the ~:id~ of the user passed as its argument to match it to ~user_id~ from
~user_role~ table by inner joining the tables ~role~ and ~user_role~ on ~id~ and ~role_id~,
respectively being equal and queries out the ~id~ and ~application_id~. 

These attributes are stored in a map with keys namely ~:role-id~ and ~application-id~ which is in
turn added to the ~user~'s key attribute ~user-roles~

#+begin_src clojure
(defn- find-user-roles [conn user-id]
  (map (fn [row] {:role-id (:id row) :application-id (:application_id row)})
       (jdbc/query conn ["select r.id, r.application_id
                         from role r
                         inner join user_role ur on r.id = ur.role_id
                         where ur.user_id = ?" user-id])))
#+end_src
 
*** add-user!
In ~add-user!~ function, we perform insert of the new user's details like ~:username~, encrypted
~:password~, auto incremented ~:id~ inside the ~user~ table and store the result of the operation in
the variable ~res~.
From ~res~ we extract the ~:id~ of the first user and store it in ~user-id~

#+BEGIN_SRC clojure
 (let [res (jdbc/insert! conn
                            :user
                            {:username (:username user) :password (:password user)})
          user-id (-> res first :id)])
#+END_SRC

Now using ~doseq~ loop, we bind ~:user_roles~ attribute of the user to variable ~ur~.
We then fill out the ~:user_id~ field from above and ~:role_id~ field from ~ur~ binding variable.

#+BEGIN_SRC clojure
(doseq [ur (:user-roles user)]
        (jdbc/insert! conn
                      :user_role
                      [:user_id :role_id]
                      [user-id (:role-id ur)])
#+END_SRC
